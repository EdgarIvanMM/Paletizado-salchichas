MODULE MainModule
	PERS tooldata chupador := [TRUE,[[0,0,11],[1,0,0,0]],[0.7,[-21.3,-14.8,51.3],[1,0,0,0],0.011,0.011,0.001]];
	CONST robtarget acercarAgarrar := [[766.97,-292.76,416.04],[0.0139469,0.91811,0.396053,0.00467851],[-1,-1,1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
	CONST robtarget agarrar := [[794.42,-271.50,263.68],[0.00666167,0.932478,-0.360927,0.013075],[-1,-1,2,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
	CONST robtarget soltar := [[871.01,192.78,235.79],[0.00327119,0.367427,0.930046,0.00109883],[0,-1,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
	CONST robtarget home := [[756.02,12.22,901.96],[0.0140844,0.918175,0.395895,0.00484775],[0,-1,1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];

	CONST robtarget pruebaDejr := [[870.66,214.83,229.67],[0.00387998,0.917744,0.397065,0.00839315],[0,-1,1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    
    CONST robtarget preVertical1 := [[641.32,202.04,206.85],[0.259751,-0.656779,0.270201,-0.654341],[0,0,2,1],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget postVertical1 := [[623.40,202.07,206.84],[0.259771,-0.656785,0.270142,-0.654351],[0,0,2,1],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget agarrarVertical := [[741.72,-220.18,260.28],[0.00751431,0.912615,0.408748,0.00169762],[-1,-1,1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];

    CONST robtarget preCentro := [[756.38,142.48,586.04],[0.123692,-0.741672,0.239175,-0.614344],[0,0,2,1],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget preVertical2 := [[740.25,11.98,226.27],[0.645544,-0.6468,-0.301648,-0.271903],[-1,0,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget postVertical2 := [[740.22,-8.29,226.25],[0.645525,-0.646829,-0.301603,-0.271931],[-1,0,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];

    CONST robtarget pruebaOffAgarreVertical := [[741.73,-220.18,403.92],[0.00752064,0.912625,0.408726,0.00170749],[-1,-1,1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget pruebaOffPre := [[641.31,202.02,361.19],[0.2597,-0.656782,0.27021,-0.654355],[0,0,2,1],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    
    PERS wobjdata wobj_cajaFormador := [FALSE,TRUE,"",[[686.187,88.3068,374.52],[1.63438E-05,0.729606,0.683867,2.77281E-06]],[[0,0,0],[1,0,0,0]]];
    CONST robtarget pre8 := [[1016.75,118.85,184.62],[0.260657,-0.273224,-0.650339,-0.65914],[0,1,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];

    CONST robtarget centro := [[888.21,-47.05,439.14],[0.321261,0.600472,0.685623,0.257187],[-1,-1,0,1],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget post8 := [[1016.76,101.82,184.61],[0.260644,-0.273242,-0.650325,-0.659151],[0,1,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    
    !Variables para seguimiento de proceso
    VAR NUM countSalchicha := 0; !LLeva conteo de salchichas
    VAR NUM limSalchicha := 1;   !Cambiar a cuantos paquetes de salchicha quieres que deje en los cuadros 1, 2, 3 y 4.
    
    !Indicadores de cuadros terminados
    VAR bool cuadro{6} := [FALSE, FALSE, FALSE, FALSE, FALSE, FALSE]; 
    VAR bool cuadroV{8} := [FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE];
    
    !Configuraciones de velocidad y z de los movimientos.
    VAR speeddata VSS:=[1500, 500, 5000, 1000];   ! Velocidad sin salchicha
    VAR speeddata VCS:=[1000, 500, 5000, 1000];   ! Velocidad con salchicha
    VAR zonedata zSin :=z50; !Z SIN salchicha
    VAR zonedata zCon :=z10;
    CONST robtarget agarrarAsarHorizontal := [[738.00,-246.62,265.02],[0.00766925,0.912894,0.408121,0.00171927],[-1,-1,1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget dejarAsarHorizontal := [[741.78,44.74,200.38],[0.00770433,0.912812,0.408303,0.0017548],[0,-1,2,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget dejarAsarVertical := [[736.04,237.87,200.46],[0.637796,-0.6569,-0.27701,-0.291486],[0,1,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget agarrarAsarVertical := [[737.97,-221.46,269.81],[0.00760298,0.912885,0.408142,0.00165042],[-1,-1,1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]]; !Z CON salchicha
    
PROC Main()
    MoveJ home , VSS, zSin, chupador; !Mover a home antes de iniciar proceso.
    AccSet 100, 70; !Ajustes de aceleracion
    !tomarSalchicha; !Llama a PROC que toma el paquete de salchicha
    pregunta;
ENDPROC

!PROC que toma los paquetes de salchicha dependiendo cuadros de formador terminados. 
PROC tomarSalchicha()
    IF cuadro{1} AND cuadro{2} AND cuadro{3} AND cuadro{4} AND (cuadroV{8} = TRUE) THEN !Los cuadros 1, 2, 3 y 4 se toman de la misma forma, si estos estan completados, procede a tomarlos de la otra forma (verticales)
        !Segunda manera de agarrar el paquete de salchichas. 
        !TPWrite "Conteo de salchichas: "\ Num := countSalchicha; !Muestra cuantas salchichas lleva el proceso por cuadro.
        MoveJ Offs(agarrarVertical, 0, 0, 200), VSS, zSin, chupador; !Se posiciona arriba de la posicion para agarrar paquete de salchicha.
        MoveL agarrarVertical, VSS, z50, chupador; !Se posiciona en la posicion para agarrar paquete de salchicha. 
        WaitRob \ZeroSpeed; 
        !Encender chupador
        Set ABB_Scalable_IO_0_DO2;
        STOP;
        WaitTime 0.5;
        MoveL Offs(agarrarVertical, 0, 0, 250), VCS, zCon, chupador; ! = linea 57  
        
            IF cuadroV{7} OR cuadroV{6} OR cuadroV{5} = FALSE THEN ! Si cuadro 7 6 o 5 no se han completado correr rutina dejarSalchichaVertical2. 
            dejarSalchichaVertical2; 
            ENDIF
            
            IF cuadroV{4} OR cuadroV{3} OR cuadroV{2} OR cuadroV{1} = FALSE THEN !Si cuadro 4, 3, 2 o 1 no se han completado correr rutina dejarSalchichaVertical.  
            dejarSalchichaVertical;
            ENDIF
    ENDIF
    
    !Primer manera de agarrar el paquete de salchichas
    TPWrite "Conteo de salchichas: "\ Num := countSalchicha; != Linea 56
    MoveJ Offs(agarrar, 0, 0, 150), VSS, zSin, chupador;
    !MoveJ acercarAgarrar, v500, z50, chupador;
    MoveL agarrar, VSS, zSin, chupador;
    WaitRob \ZeroSpeed;
    !Encender chupador
    Set ABB_Scalable_IO_0_DO2;
    STOP;
    WaitTime 0.5;
    IF cuadro{1} = FALSE THEN   !Si cuadro 1 no se ha completado se corre la rutina dejarSalchicha1 (Primer cuadro grande, paquete de salchichas horizontal)
        dejarSalchicha1;
    ELSEIF cuadro{2} = FALSE THEN !Si cuadro 2 no se completado se corre la rutina dejarSalchicha2 (Segundo cuadro grande, paquete de salchichas horizontal)
        dejarSalchicha2;
    ELSEIF cuadro{3}= FALSE THEN !Si cuadro 3 no se ha completado se corre la rutina dejarSalchicha3 (Tercer cuadro grande, paquete de salchichas horizontal)
        dejarSalchicha3;
    ELSEIF cuadro{4}= FALSE THEN !Si cuadro 4 no se ha completado se corre la rutina dejarSalchicha4 (Cuarto y ultimo cuadro grande, paquete de salchichas horizontal)
        dejarSalchicha4;
    ELSEIF cuadroV{8}= FALSE THEN !Si cuadroV8 no se ha completado se corre la rutina dejarSalchichaVertical2 (Cuadro 8 vertical, se tomo la decision de dejar este primero ya que el robot toma diferente posicion para alcanzar a llegar a ese cuadro.) 
        dejarSalchichaVertical2;
    ENDIF
ENDPROC

!Deja n salchichas del primer cuadro acostado (cuadro1). Capacidad del cuadro1 = 5
PROC dejarSalchicha1()
    MoveJ Offs(pruebaDejr, 0, 0, 150), VCS, zCon, chupador;   !Se posiciona 150mm arriba del cuadro 1.       
    MoveL pruebaDejr, VCS, zCon, chupador;                    !Se posiciona en el cuadro 1 en donde dejara el paquete de salchichas.
    WaitRob \ZeroSpeed;                                       !Espera a que el robot este detenido.
    Reset ABB_Scalable_IO_0_DO2;
    STOP;                                                     !Pausa el programa para encender manualmente ventosas de gripper.
    MoveL Offs(pruebaDejr, 0, 0, 150), VSS, zSin, chupador;   !Se posiciona 150mm arriba del cuadro 1.
    Incr countSalchicha;                                      !Se incrementa el conteo de paquete de salchichas cada vez que pasa por este punto.
    IF countSalchicha = limSalchicha THEN                     !Si el conteo es igual al limite puesto al principio en limSalchicha, cuadro1 se vuelve verdadero y se reinicia el contador de paquetes de salchichas.
        cuadro{1}:= TRUE;
        countSalchicha:=0;
    ENDIF
    tomarSalchicha;                                           !Se llama a rutina de tomar salchicha
ENDPROC

!Deja n salchichas en el segundo cuadro acostado (cuadro2). Capacidad del cuadro2 = 5
!Mismos movimientos y logica que dejarSalchicha1 pero posicionados en el siguiente cuadro.
PROC dejarSalchicha2()
    MoveJ Offs(pruebaDejr, 178, 0, 150), VCS, zCon, chupador;
    MoveL Offs(pruebaDejr, 178, 0, 0), VCS, zCon, chupador;
    WaitRob \ZeroSpeed;
    Reset ABB_Scalable_IO_0_DO2;
    STOP;
    MoveL Offs(pruebaDejr, 178, 0, 150), VSS, zSin, chupador;
    Incr countSalchicha;
    IF countSalchicha = limSalchicha THEN
        cuadro{2}:= TRUE;
        countSalchicha:=0;
    ENDIF
    tomarSalchicha;
ENDPROC

!Deja n salchichas en el tercer cuadro acostado (cuadro3). Capacidad del cuadro3 = 5
!Mismos movimientos y logica que dejarSalchicha1 pero posicionados en el siguiente cuadro.
PROC dejarSalchicha3()
    MoveJ Offs(pruebaDejr, 0, 178, 150), VCS, zCon, chupador;
    MoveJ Offs(pruebaDejr, 0, 178, 0), VCS, zCon, chupador;
     WaitRob \ZeroSpeed;
     Reset ABB_Scalable_IO_0_DO2;
     STOP;
     MoveL Offs(pruebaDejr, 0, 178, 150), VSS, zSin, chupador;
     Incr countSalchicha;
     IF countSalchicha = limSalchicha THEN
         cuadro{3}:=TRUE;
         countSalchicha:=0;
     ENDIF
     tomarSalchicha;
ENDPROC

!Deja n salchichas en el cuarto cuadro acostado (cuadro4). Capacidad del cuadro4 = 5
!Mismos movimientos y logica que dejarSalchicha1 pero posicionados en el siguiente cuadro.
PROC dejarSalchicha4()
    MoveJ Offs(pruebaDejr, 178, 178, 150), VCS, zCon, chupador;
    MoveJ Offs(pruebaDejr, 178, 178, 0), VCS, zCon, chupador;
    WaitRob \ZeroSpeed;
    Reset ABB_Scalable_IO_0_DO2;
    STOP;
    MoveL Offs(pruebaDejr, 178, 178, 200), VSS, zSin, chupador;
    Incr countSalchicha;
     IF countSalchicha = limSalchicha THEN
         cuadro{4}:=TRUE;
         countSalchicha:=0;
     ENDIF
    tomarSalchicha;
ENDPROC

!Deja 1 paquete de salchichas en los cuadros 4, 3, 2, 1. Capacidad de los cuadros = 1
PROC dejarSalchichaVertical()
   TEST cuadroV{4} = FALSE OR TRUE
        CASE cuadroV{4} = FALSE:  !DEJA CUADRO 4 VERTICAL
            MoveJ Offs(preVertical1, -65, 120, 200), VCS, zCon, chupador;           !Se posiciona 200mm arriba del cuadro 4.
            MoveL Offs(preVertical1, -65, 120, 0), VCS, zCon, chupador;             !Se posiciona en el primer punto dentro del cuadro 4
            WaitRob \ZeroSpeed;                                                     !Espera a que el robot este detenido
            WaitTime 0.5;                                                           !Espera 0.5 segundos
            MoveL Offs(postVertical1, -65, 120, 0), VCS, zCon, chupador;            !Hace segundo movimiento dentro del cuadro (Este movimiento se hace para entregar y dejar lo mas recto posible el paquete de salchichas)
            WaitRob \ZeroSpeed;                                                     !Espera a que este detenido el robot
            Reset ABB_Scalable_IO_0_DO2;
            STOP;                                                                   !Se pausa el programa para apagar (soltar paquete) manualmente las ventosas.
            MoveL Offs(postVertical1, -165, 120, 200), VSS, zSin, chupador;         !Se posiciona 200mm arriba del cuadro 4 pero del movimiento post (movimeinto para enderezar el paquete).
            cuadroV{4} := TRUE;                                                     !Se marca cuadro 4 como completado
            tomarSalchicha;                                                         !Se llama a rutina de agarrar salchichas
    
        CASE cuadroV{3} = FALSE: !DEJA CUADRO 3 VERTICAL
            !Mismos movimientos que cuadro 4 pero con posiciones de cuadro 3 (Se usan offsets)
            MoveJ Offs(preVertical1, 0, 120, 200), VCS, zCon, chupador;
            MoveL Offs(preVertical1, 0, 120, 0), VCS, zCon, chupador;
            WaitRob \ZeroSpeed;
            WaitTime 0.5;
            MoveL Offs(postVertical1, 0, 120, 0), VCS, zCon, chupador;
            WaitRob \ZeroSpeed;
            Reset ABB_Scalable_IO_0_DO2;
            STOP;
            !Soltar salchicha
            MoveL Offs(postVertical1, 0, 120, 200), VSS, zSin, chupador;
            cuadroV{3} := TRUE;
            tomarSalchicha;
        
        CASE cuadroV{2} = FALSE: !DEJA CUADRO 2 VERTICAL 
            !Mismos movimientos que cuadro 4 pero con posiciones de cuadro 2 (Se usan offsets)
            MoveJ Offs(preVertical1, -65, 0, 200), VCS, zCon, chupador;
            MoveL Offs(preVertical1, -65, 0, 0), VCS, zCon, chupador;
            WaitRob \ZeroSpeed;
            WaitTime 0.5;
            MoveL Offs(postVertical1, -65, 0, 0), VCS, zCon, chupador;
            WaitRob \ZeroSpeed;
            Reset ABB_Scalable_IO_0_DO2;
            STOP;
            MoveL Offs(postVertical1, -65, 0, 200), VSS, zSin, chupador;
            cuadroV{2} := TRUE;
            tomarSalchicha;
        
        CASE cuadroV{1} = FALSE: !DEJA CUADRO 1 VERTICAL
            !Mismos movimientos que cuadro 4 pero con posiciones de cuadro 1 (Se usan offsets)        
            MoveJ Offs(preVertical1, 0, 0, 200), VCS, zCon, chupador;
            MoveL preVertical1, VCS, zCon, chupador;
            WaitRob \ZeroSpeed;
            WaitTime 0.5;
            MoveL postVertical1, VCS, zCon, chupador;
            WaitRob \ZeroSpeed;
            Reset ABB_Scalable_IO_0_DO2;
            STOP;
            !Soltar salchicha
            MoveL Offs(postVertical1, 0, 0, 200), VSS, zSin, chupador;
            cuadroV{1} := TRUE; !Cuando cuadroV1 se complete finalizar el programa. 
            finalizar; 
            !tomarSalchicha;
    ENDTEST
ENDPROC

!Deja 1 paquete de salchichas en los cuadros 8, 7, 6, 5. Capacidad de los cuadros = 1
PROC dejarSalchichaVertical2()
   TEST cuadroV{8} = FALSE OR TRUE
        CASE cuadroV{8} = FALSE: !DEJA CUADRO 8
            !Este cuadro vertical tiene movimientos unicos ya que el robot no llegaba a su posicion de otra manera.
            MoveL Offs(agarrar, 0, 0, 100), VSS, zCon, chupador;
            MoveL Offs(pre8, 0, 0, 200), VCS, zCon, chupador;           !Se posiciona 200mm arriba del cuadro vertical 8
            MoveL pre8, VCS, zCon, chupador;                            !Se posiciona en su punto "pre" especial.
            WaitRob \ZeroSpeed;                                         !Espera a que el robot se detenga completamente
            WaitTime 0.5;                                               !Espera 0.5 segundos
            MoveL post8, VCS, zCon, chupador;                           !Se posiciona en el punto "post" especial.
            WaitRob \ZeroSpeed;                                         !Espera a que el robot este completamente detenido.
            Reset ABB_Scalable_IO_0_DO2;
            STOP;                                                       !Pausa el programa para apagar ventosas (soltar paquete de salchichas) manualmente 
            MoveL Offs(post8, 0, 0, 200), VSS, zSin, chupador;          !Se posiciona 200 mm arriba del punto post.
            cuadroV{8} := TRUE;                                         !Se marca cuadroV8 como completado.
            tomarSalchicha;                                             !Se llama a rutina de tomar salchicha.
            
        CASE cuadroV{7} = FALSE: !DEJA CUADRO 7
            !Mismos movimientos que cuadroV4 pero con posiciones de cuadro 7 (Se usan offsets) 
            MoveJ Offs(preVertical2, 240, 120, 200), VCS, zCon, chupador;
            MoveL Offs(preVertical2, 240, 120, 0), VCS, zCon, chupador;
            WaitRob \ZeroSpeed;
            WaitTime 0.5;
            MoveL Offs(postVertical2, 240, 120, 0), VCS, zCon, chupador;
            WaitRob \ZeroSpeed;
            Reset ABB_Scalable_IO_0_DO2;
            STOP;
            !Soltar salchicha
            MoveL Offs(postVertical2, 240, 120, 200), VSS, zSin, chupador;
            cuadroV{7} := TRUE;
            tomarSalchicha;
                
        CASE cuadroV{6} = FALSE: !DEJA CUADRO 6
            !Mismos movimientos que cuadroV4 pero con posiciones de cuadro 6 (Se usan offsets) 
            MoveJ Offs(preVertical2, 120, 120, 200), VCS, zCon, chupador;
            MoveL Offs(preVertical2, 120, 120, 0), VCS, zCon, chupador;
            WaitRob \ZeroSpeed;
            WaitTime 0.5;
            MoveL Offs(postVertical2, 120, 120, 0), VCS, zCon, chupador;
            WaitRob \ZeroSpeed;
            Reset ABB_Scalable_IO_0_DO2;
            STOP;
            !Soltar salchicha
            MoveL Offs(postVertical2, 120, 120, 200), VSS, zSin, chupador;
            cuadroV{6} := TRUE;
            tomarSalchicha;
            
        CASE cuadroV{5} = FALSE: !DEJA CUADRO 5
            !Mismos movimientos que cuadroV4 pero con posiciones de cuadro 5 (Se usan offsets) 
            MoveJ Offs(preVertical2, 0, 0, 200), VCS, zCon, chupador;
            MoveL preVertical2, VCS, zCon, chupador;
            WaitRob \ZeroSpeed;
            WaitTime 0.5;
            MoveL postVertical2, VCS, zCon, chupador;
            WaitRob \ZeroSpeed;
            Reset ABB_Scalable_IO_0_DO2;
            STOP;
            !Soltar salchicha
            MoveL Offs(postVertical2, 0, 0, 200), VSS, zSin, chupador;
            cuadroV{5} := TRUE;
            tomarSalchicha;
    ENDTEST
ENDPROC


!--------------------------------------------------------------PALETIZADO DE SALCHICHAS DE ASAR-----------------------------------------------------------------------------------------------------

! PROC que toma las salchichas de asar.    Dimensiones: 14.7 x 14.7
PROC tomarSalchichaAsar()
    MoveJ Offs(agarrarAsarHorizontal, 0, 0, 200), VSS, zSin, chupador;  !Se posiciona arriba del paquete de salchichas. +200 en Z.      
    MoveL agarrarAsarHorizontal, VSS, zSin, chupador;                   !Se posiciona en el lugar exacto a agarrar paquete de salchichas.
    WaitRob \ZeroSpeed;                                                 !Espera a que el robot este totalmente detenido.
    !Encender chupador
    Set ABB_Scalable_IO_0_DO1;                                          !Se encienden las ventosas.
    STOP;                                                               !Se para el programa.
    WaitTime 0.5;                                                       !Espera 0.5 segundos.
    MoveJ Offs(agarrarAsarHorizontal, 0, 0, 200), VSS, zSin, chupador;  !Sube de nuevo 200mm en Z. Evita colision con el transformador en el movimiento a dejar.
    IF cuadro{1} = FALSE THEN                                           !Si cuadro 1 aun no es completado se dirije a la posicion para dejar el cuadro 1.
        dejarAsar1;
    ELSEIF cuadro{2} = FALSE THEN                                       !Si cuadro 2 aun no es completado se dirije a la posicion para dejar el cuadro 2.
        dejarAsar2;
    ELSEIF cuadro{3} = FALSE THEN                                       !Si cuadro 3 aun no es completado se dirije a la posicion para dejar el cuadro 3.
        dejarAsar3;
    ELSEIF cuadro{4} = FALSE THEN                                       !Si cuadro 4 aun no es completado se dirije a la posicion para dejar el cuadro 4.
        dejarAsar4;
    ELSEIF cuadro{5} = FALSE THEN                                       !Si cuadro 5 aun no es completado se dirije a la posicion para dejar el cuadro 5.
        dejarAsar5;
    ELSEIF cuadro{6}= FALSE THEN                                        !Si cuadro 6 aun no es completado se dirije a la posicion para dejar el cuadro 6.
        dejarAsar6;
    ELSEIF cuadroV{1} = FALSE THEN                                      !Si cuadro 1 vertical aun no es completado se dirije a la posicion para dejar el cuadro vertical 1.
        dejarAsarVertical1;
    ELSEIF cuadroV{2} = FALSE THEN                                      !Si cuadro 2 vertical aun no es completado se dirije a la posicion para dejar el cuadro vertical 1.
        dejarAsarVertical2;
    ENDIF
ENDPROC

!PROC para dejar el cuadro 1 horizontal | Capacidad del cuadro 4 paquetes de salchichas.
PROC dejarAsar1()
    MoveJ Offs(dejarAsarHorizontal, 0, 0, 150), VCS, zCon, chupador;   !Se posiciona 150mm arriba de la posicion a dejar el cuadro 1.
    MoveL dejarAsarHorizontal, VCS, zCon, chupador;                    !Se posiciona en la posicion a dejar el cuadro 1.
    WaitRob \ZeroSpeed;                                                !Espera que el robot este totalmente detenido.
    Reset ABB_Scalable_IO_0_DO1;                                       !Se apagan ventosas.
    STOP;                                                              !Se pausa el programa.
    MoveJ Offs(dejarAsarHorizontal, 0, 0, 150), VSS, zSin, chupador;   !Se posiciona 150mm arriba de la posicion a dejar el cuadro 1 para evitar colision en el movimiento a agarrar otro paquete.
    Incr countSalchicha;                                               !Se incrementa el conteo de salchichas.
    IF countSalchicha = limSalchicha THEN                              !Si el conteo de salchichas llego al limite del cuadro, se marca como cuadro finalizado en la siguiente linea
        cuadro{1}:= TRUE;
        countSalchicha:=0;                                             !Se reinicia el conteo de salchichas a 0.
    ENDIF
    tomarSalchichaAsar;                                                !Llama a tomarSalchichaAsar.
ENDPROC

!PROC para dejar el cuadro 2 horizontal. Se sigue la misma logica que el PROC para llenar el cuadro 1 | Capacidad del cuadro 4 paquetes de salchichas.
!El unico cambio es en las coordenadas, se usan Offsets para el movimiento en los demas cuadros, tomando en cuenta el movimiento en 150 mm para X | 140 mm en Y 
PROC dejarAsar2()
    MoveJ Offs(dejarAsarHorizontal, 150, 0, 150), VCS, zCon, chupador;  
    MoveL Offs(dejarAsarHorizontal, 150, 0, 0), VCS, zCon, chupador;
    WaitRob \ZeroSpeed;
    Reset ABB_Scalable_IO_0_DO1;
    STOP;
    MoveL Offs(dejarAsarHorizontal, 150, 0, 150), VSS, zSin, chupador;
    Incr countSalchicha;
    IF countSalchicha = limSalchicha THEN
        cuadro{2}:= TRUE;
        countSalchicha:=0;
    ENDIF
    tomarSalchichaAsar;
ENDPROC

!PROC para dejar el cuadro 3 horizontal. Se sigue la misma logica que el PROC para llenar el cuadro 1 | Capacidad del cuadro 4 paquetes de salchichas.
!El unico cambio es en las coordenadas, se usan Offsets para el movimiento en los demas cuadros, tomando en cuenta el movimiento en 150 mm para X | 140 mm en Y
PROC dejarAsar3()
    MoveJ Offs(dejarAsarHorizontal, 0, 140, 150), VCS, zCon, chupador;
    MoveL Offs(dejarAsarHorizontal, 0, 140, 0), VCS, zCon, chupador;
    WaitRob \ZeroSpeed;
    Reset ABB_Scalable_IO_0_DO1;
    STOP;
    MoveL Offs(dejarAsarHorizontal, 0, 140, 150), VSS, zSin, chupador;
    Incr countSalchicha;
    IF countSalchicha = limSalchicha THEN
        cuadro{3}:= TRUE;
        countSalchicha:=0;
    ENDIF
    tomarSalchichaAsar;
ENDPROC

!PROC para dejar el cuadro 4 horizontal. Se sigue la misma logica que el PROC para llenar el cuadro 1 | Capacidad del cuadro 4 paquetes de salchichas.
!El unico cambio es en las coordenadas, se usan Offsets para el movimiento en los demas cuadros, tomando en cuenta el movimiento en 150 mm para X | 140 mm en Y
PROC dejarAsar4()
    MoveJ Offs(dejarAsarHorizontal, 150, 140, 150), VCS, zCon, chupador;
    MoveL Offs(dejarAsarHorizontal, 150, 140, 0), VCS, zCon, chupador;
    WaitRob \ZeroSpeed;
    Reset ABB_Scalable_IO_0_DO1;
    STOP;
    MoveL Offs(dejarAsarHorizontal, 150, 140, 150), VSS, zSin, chupador;
    Incr countSalchicha;
    IF countSalchicha = limSalchicha THEN
        cuadro{4}:= TRUE;
        countSalchicha:=0;
    ENDIF
    tomarSalchichaAsar;
ENDPROC

!PROC para dejar el cuadro 5 horizontal. Se sigue la misma logica que el PROC para llenar el cuadro 1 | Capacidad del cuadro 4 paquetes de salchichas.
!El unico cambio es en las coordenadas, se usan Offsets para el movimiento en los demas cuadros, tomando en cuenta el movimiento en 150 mm para X | 140 mm en Y
PROC dejarAsar5()
    MoveJ Offs(dejarAsarHorizontal, 0, 280, 150), VCS, zCon, chupador;
    MoveL Offs(dejarAsarHorizontal, 0, 280, 0), VCS, zCon, chupador;
    WaitRob \ZeroSpeed;
    Reset ABB_Scalable_IO_0_DO1;
    STOP;
    MoveL Offs(dejarAsarHorizontal, 0, 280, 150), VSS, zSin, chupador;
    Incr countSalchicha;
    IF countSalchicha = limSalchicha THEN
        cuadro{5}:= TRUE;
        countSalchicha:=0;
    ENDIF
    tomarSalchichaAsar;
ENDPROC

!PROC para dejar el cuadro 6 horizontal. Se sigue la misma logica que el PROC para llenar el cuadro 1. | Capacidad del cuadro 4 paquetes de salchichas.
!El unico cambio es en las coordenadas, se usan Offsets para el movimiento en los demas cuadros, tomando en cuenta el movimiento en 150 mm para X | 140 mm en Y
PROC dejarAsar6()
    MoveJ Offs(dejarAsarHorizontal, 150, 280, 150), VCS, zCon, chupador;
    MoveL Offs(dejarAsarHorizontal, 150, 280, 0), VCS, zCon, chupador;
    WaitRob \ZeroSpeed;
    Reset ABB_Scalable_IO_0_DO1;
    STOP;
    MoveL Offs(dejarAsarHorizontal, 150, 280, 150), VSS, zSin, chupador;
    Incr countSalchicha;
    IF countSalchicha = limSalchicha THEN
        cuadro{6}:= TRUE;
        countSalchicha:=0;
        
    ENDIF
    tomarSalchichaAsar;
ENDPROC

!PROC para dejar el primer paquete de salchicha vertical. | Capacidad del cuadro: 1 paquete de salchichas
!Se utiliza un robtarget diferente. "dejarAsarVertical" en lugar de "dejarAsarHorizontal".
PROC dejarAsarVertical1()
    MoveJ Offs(dejarAsarVertical, 0, 0, 200), VCS, zCon, chupador;
    MoveL dejarAsarVertical, VCS, zCon, chupador;
    WaitRob \ZeroSpeed;
    Reset ABB_Scalable_IO_0_DO1;
    STOP;
    MoveL Offs(dejarAsarVertical, 0, 0, 150), VSS, zSin, chupador;
    Incr countSalchicha;
    IF countSalchicha = limSalchicha THEN
        cuadroV{1}:= TRUE;
        countSalchicha:=0;
    ENDIF
    tomarSalchichaAsar;
ENDPROC

!PROC para dejar el segundo paquete de salchicha vertical. | Capacidad del cuadro: 1 paquete de salchichas
!Se utilizan offsets.  150mm para X. 
PROC dejarAsarVertical2()
    MoveJ Offs(dejarAsarVertical, 150, 0, 150), VCS, zCon, chupador;
    MoveL Offs(dejarAsarVertical, 150, 0, 0), VCS, zCon, chupador;
    WaitRob \ZeroSpeed;
    Reset ABB_Scalable_IO_0_DO1;
    STOP;
    MoveL Offs(dejarAsarVertical, 150, 0, 150), VSS, zSin, chupador;
    Incr countSalchicha;
    IF countSalchicha = limSalchicha THEN
        cuadroV{2}:= TRUE;
        countSalchicha:=0;
        reinicio;
    ENDIF
    tomarSalchichaAsar;
ENDPROC

!Para finalizar programa, se va a home, se borra el texto de tp y se termina programa.
PROC finalizar()
    MoveJ home , VSS, zSin, chupador;
    TPErase;
    EXIT;
ENDPROC

!PROC para preguntar a usuario el tipo de paquete de salchichas que quiere paletizar.
PROC pregunta()
    TPReadFK reg1, "Selecciona el tipo de salchicha que quieres paletizar", stEmpty, stEmpty, stEmpty, "SALCHICHAS JUMBO", "SALCHICHAS ASAR";
    IF reg1 = 4 THEN              !Si reg1 = 4 (SALCHICHAS JUMBO), se corre tomarSalchicha que corresponde al agarre de salchichas JUMBO
        tomarSalchicha;
    ELSEIF reg1 = 5 THEN          !Si reg1 = 5 (SALCHICHAS ASAR), se corre tomarSalchichaAsar que corresponde al agarre de salchichas para asar.
    tomarSalchichaAsar;
    ENDIF
ENDPROC

!PROC para preguntar a usuario si quiere reiniciar/finalizar el paletizado.
PROC reinicio()
    !Los valores de los cuadros (estados) se convierten en FALSE nuevamente.
    cuadro{1} := FALSE; cuadro{2} := FALSE; cuadro{3} := FALSE; cuadro{4} := FALSE; cuadro{5} := FALSE; cuadro{6} := FALSE;
    cuadroV{1} := FALSE; cuadroV{2} := FALSE; cuadroV{3} := FALSE; cuadroV{4} := FALSE; cuadroV{5} := FALSE; cuadroV{6} := FALSE; cuadroV{7} := FALSE; cuadroV{8} := FALSE;
    
    !Pregunta sobre el reinicio
    TPReadFK reg1, "¿Quieres reiniciar el paletizado?", stEmpty, stEmpty, stEmpty, "REINICIAR", "FINALIZAR";
    IF reg1 = 4 THEN !Si el usuario quiere reinicio mandar a main nuevamente.
        main;
    ELSEIF reg1 = 5 THEN !Si el usuario quiere finalizar el paletizado llamar a PROC finalizar.
    finalizar;
    ENDIF
ENDPROC

ENDMODULE